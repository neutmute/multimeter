//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Multimeter.Config
{
    
    
    /// <summary>
    /// The MultimeterAppConfig Configuration Section.
    /// </summary>
    internal partial class MultimeterAppConfig : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the MultimeterAppConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string MultimeterAppConfigSectionName = "multimeterConfig";
        
        /// <summary>
        /// The XML path of the MultimeterAppConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string MultimeterAppConfigSectionPath = "multimeterConfig";
        
        /// <summary>
        /// Gets the MultimeterAppConfig instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public static global::Multimeter.Config.MultimeterAppConfig Instance
        {
            get
            {
                return ((global::Multimeter.Config.MultimeterAppConfig)(global::System.Configuration.ConfigurationManager.GetSection(global::Multimeter.Config.MultimeterAppConfig.MultimeterAppConfigSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.MultimeterAppConfig.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Multimeter.Config.MultimeterAppConfig.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Publishers Property
        /// <summary>
        /// The XML name of the <see cref="Publishers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string PublishersPropertyName = "publishers";
        
        /// <summary>
        /// Gets or sets the Publishers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Publishers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.MultimeterAppConfig.PublishersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Multimeter.Config.PublisherConfigCollection Publishers
        {
            get
            {
                return ((global::Multimeter.Config.PublisherConfigCollection)(base[global::Multimeter.Config.MultimeterAppConfig.PublishersPropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.MultimeterAppConfig.PublishersPropertyName] = value;
            }
        }
        #endregion
        
        #region KeenIO Property
        /// <summary>
        /// The XML name of the <see cref="KeenIO"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string KeenIOPropertyName = "keenIO";
        
        /// <summary>
        /// Gets or sets the KeenIO.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The KeenIO.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.MultimeterAppConfig.KeenIOPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Multimeter.Config.KeenIOAppConfig KeenIO
        {
            get
            {
                return ((global::Multimeter.Config.KeenIOAppConfig)(base[global::Multimeter.Config.MultimeterAppConfig.KeenIOPropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.MultimeterAppConfig.KeenIOPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Multimeter.Config
{
    
    
    /// <summary>
    /// A collection of PublisherAppConfig instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Multimeter.Config.PublisherAppConfig), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Multimeter.Config.PublisherConfigCollection.PublisherAppConfigPropertyName)]
    internal partial class PublisherConfigCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Multimeter.Config.PublisherAppConfig"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string PublisherAppConfigPropertyName = "publisher";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override string ElementName
        {
            get
            {
                return global::Multimeter.Config.PublisherConfigCollection.PublisherAppConfigPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Multimeter.Config.PublisherConfigCollection.PublisherAppConfigPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Multimeter.Config.PublisherAppConfig)(element)).AssemblyType;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Multimeter.Config.PublisherAppConfig"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Multimeter.Config.PublisherAppConfig"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Multimeter.Config.PublisherAppConfig();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Multimeter.Config.PublisherAppConfig"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Multimeter.Config.PublisherAppConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::Multimeter.Config.PublisherAppConfig this[int index]
        {
            get
            {
                return ((global::Multimeter.Config.PublisherAppConfig)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Multimeter.Config.PublisherAppConfig"/> with the specified key.
        /// </summary>
        /// <param name="assemblyType">The key of the <see cref="global::Multimeter.Config.PublisherAppConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::Multimeter.Config.PublisherAppConfig this[object assemblyType]
        {
            get
            {
                return ((global::Multimeter.Config.PublisherAppConfig)(base.BaseGet(assemblyType)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Multimeter.Config.PublisherAppConfig"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="publisher">The <see cref="global::Multimeter.Config.PublisherAppConfig"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public void Add(global::Multimeter.Config.PublisherAppConfig publisher)
        {
            base.BaseAdd(publisher);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Multimeter.Config.PublisherAppConfig"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="publisher">The <see cref="global::Multimeter.Config.PublisherAppConfig"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public void Remove(global::Multimeter.Config.PublisherAppConfig publisher)
        {
            base.BaseRemove(this.GetElementKey(publisher));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Multimeter.Config.PublisherAppConfig"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Multimeter.Config.PublisherAppConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::Multimeter.Config.PublisherAppConfig GetItemAt(int index)
        {
            return ((global::Multimeter.Config.PublisherAppConfig)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Multimeter.Config.PublisherAppConfig"/> with the specified key.
        /// </summary>
        /// <param name="assemblyType">The key of the <see cref="global::Multimeter.Config.PublisherAppConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::Multimeter.Config.PublisherAppConfig GetItemByKey(string assemblyType)
        {
            return ((global::Multimeter.Config.PublisherAppConfig)(base.BaseGet(((object)(assemblyType)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Multimeter.Config
{
    
    
    /// <summary>
    /// The PublisherAppConfig Configuration Element.
    /// </summary>
    internal partial class PublisherAppConfig : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region AssemblyName Property
        /// <summary>
        /// The XML name of the <see cref="AssemblyName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string AssemblyNamePropertyName = "assemblyName";
        
        /// <summary>
        /// Gets or sets the AssemblyName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The AssemblyName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.PublisherAppConfig.AssemblyNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string AssemblyName
        {
            get
            {
                return ((string)(base[global::Multimeter.Config.PublisherAppConfig.AssemblyNamePropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.PublisherAppConfig.AssemblyNamePropertyName] = value;
            }
        }
        #endregion
        
        #region AssemblyType Property
        /// <summary>
        /// The XML name of the <see cref="AssemblyType"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string AssemblyTypePropertyName = "assemblyType";
        
        /// <summary>
        /// Gets or sets the AssemblyType.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The AssemblyType.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.PublisherAppConfig.AssemblyTypePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string AssemblyType
        {
            get
            {
                return ((string)(base[global::Multimeter.Config.PublisherAppConfig.AssemblyTypePropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.PublisherAppConfig.AssemblyTypePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Multimeter.Config
{
    
    
    /// <summary>
    /// The KeenIOAppConfig Configuration Element.
    /// </summary>
    internal partial class KeenIOAppConfig : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ProjectId Property
        /// <summary>
        /// The XML name of the <see cref="ProjectId"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string ProjectIdPropertyName = "projectId";
        
        /// <summary>
        /// Gets or sets the ProjectId.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The ProjectId.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.KeenIOAppConfig.ProjectIdPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ProjectId
        {
            get
            {
                return ((string)(base[global::Multimeter.Config.KeenIOAppConfig.ProjectIdPropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.KeenIOAppConfig.ProjectIdPropertyName] = value;
            }
        }
        #endregion
        
        #region WriteKey Property
        /// <summary>
        /// The XML name of the <see cref="WriteKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string WriteKeyPropertyName = "writeKey";
        
        /// <summary>
        /// Gets or sets the WriteKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The WriteKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.KeenIOAppConfig.WriteKeyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string WriteKey
        {
            get
            {
                return ((string)(base[global::Multimeter.Config.KeenIOAppConfig.WriteKeyPropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.KeenIOAppConfig.WriteKeyPropertyName] = value;
            }
        }
        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Multimeter.Config
{
    
    
    /// <summary>
    /// The MultimeterConfig Configuration Section.
    /// </summary>
    public partial class MultimeterConfig : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the MultimeterConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string MultimeterConfigSectionName = "multimeterConfig";
        
        /// <summary>
        /// The XML path of the MultimeterConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string MultimeterConfigSectionPath = "multimeterConfig";
        
        /// <summary>
        /// Gets the MultimeterConfig instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::Multimeter.Config.MultimeterConfig Instance
        {
            get
            {
                return ((global::Multimeter.Config.MultimeterConfig)(global::System.Configuration.ConfigurationManager.GetSection(global::Multimeter.Config.MultimeterConfig.MultimeterConfigSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.MultimeterConfig.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Multimeter.Config.MultimeterConfig.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Publishers Property
        /// <summary>
        /// The XML name of the <see cref="Publishers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string PublishersPropertyName = "publishers";
        
        /// <summary>
        /// Gets or sets the Publishers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Publishers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.MultimeterConfig.PublishersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Multimeter.Config.PublisherConfigCollection Publishers
        {
            get
            {
                return ((global::Multimeter.Config.PublisherConfigCollection)(base[global::Multimeter.Config.MultimeterConfig.PublishersPropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.MultimeterConfig.PublishersPropertyName] = value;
            }
        }
        #endregion
        
        #region KeenIO Property
        /// <summary>
        /// The XML name of the <see cref="KeenIO"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string KeenIOPropertyName = "keenIO";
        
        /// <summary>
        /// Gets or sets the KeenIO.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The KeenIO.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.MultimeterConfig.KeenIOPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Multimeter.Config.KeenIOConfig KeenIO
        {
            get
            {
                return ((global::Multimeter.Config.KeenIOConfig)(base[global::Multimeter.Config.MultimeterConfig.KeenIOPropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.MultimeterConfig.KeenIOPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Multimeter.Config
{
    
    
    /// <summary>
    /// A collection of PublisherConfig instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Multimeter.Config.PublisherConfig), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Multimeter.Config.PublisherConfigCollection.PublisherConfigPropertyName)]
    public partial class PublisherConfigCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Multimeter.Config.PublisherConfig"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string PublisherConfigPropertyName = "publisher";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::Multimeter.Config.PublisherConfigCollection.PublisherConfigPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Multimeter.Config.PublisherConfigCollection.PublisherConfigPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Multimeter.Config.PublisherConfig)(element)).AssemblyType;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Multimeter.Config.PublisherConfig"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Multimeter.Config.PublisherConfig"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Multimeter.Config.PublisherConfig();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Multimeter.Config.PublisherConfig"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Multimeter.Config.PublisherConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Multimeter.Config.PublisherConfig this[int index]
        {
            get
            {
                return ((global::Multimeter.Config.PublisherConfig)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Multimeter.Config.PublisherConfig"/> with the specified key.
        /// </summary>
        /// <param name="assemblyType">The key of the <see cref="global::Multimeter.Config.PublisherConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Multimeter.Config.PublisherConfig this[object assemblyType]
        {
            get
            {
                return ((global::Multimeter.Config.PublisherConfig)(base.BaseGet(assemblyType)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Multimeter.Config.PublisherConfig"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="publisher">The <see cref="global::Multimeter.Config.PublisherConfig"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::Multimeter.Config.PublisherConfig publisher)
        {
            base.BaseAdd(publisher);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Multimeter.Config.PublisherConfig"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="publisher">The <see cref="global::Multimeter.Config.PublisherConfig"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::Multimeter.Config.PublisherConfig publisher)
        {
            base.BaseRemove(this.GetElementKey(publisher));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Multimeter.Config.PublisherConfig"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Multimeter.Config.PublisherConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Multimeter.Config.PublisherConfig GetItemAt(int index)
        {
            return ((global::Multimeter.Config.PublisherConfig)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Multimeter.Config.PublisherConfig"/> with the specified key.
        /// </summary>
        /// <param name="assemblyType">The key of the <see cref="global::Multimeter.Config.PublisherConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Multimeter.Config.PublisherConfig GetItemByKey(string assemblyType)
        {
            return ((global::Multimeter.Config.PublisherConfig)(base.BaseGet(((object)(assemblyType)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Multimeter.Config
{
    
    
    /// <summary>
    /// The PublisherConfig Configuration Element.
    /// </summary>
    public partial class PublisherConfig : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region AssemblyName Property
        /// <summary>
        /// The XML name of the <see cref="AssemblyName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string AssemblyNamePropertyName = "assemblyName";
        
        /// <summary>
        /// Gets or sets the AssemblyName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The AssemblyName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.PublisherConfig.AssemblyNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string AssemblyName
        {
            get
            {
                return ((string)(base[global::Multimeter.Config.PublisherConfig.AssemblyNamePropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.PublisherConfig.AssemblyNamePropertyName] = value;
            }
        }
        #endregion
        
        #region AssemblyType Property
        /// <summary>
        /// The XML name of the <see cref="AssemblyType"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string AssemblyTypePropertyName = "assemblyType";
        
        /// <summary>
        /// Gets or sets the AssemblyType.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The AssemblyType.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.PublisherConfig.AssemblyTypePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string AssemblyType
        {
            get
            {
                return ((string)(base[global::Multimeter.Config.PublisherConfig.AssemblyTypePropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.PublisherConfig.AssemblyTypePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Multimeter.Config
{
    
    
    /// <summary>
    /// The KeenIOConfig Configuration Element.
    /// </summary>
    public partial class KeenIOConfig : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ProjectId Property
        /// <summary>
        /// The XML name of the <see cref="ProjectId"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ProjectIdPropertyName = "projectId";
        
        /// <summary>
        /// Gets or sets the ProjectId.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The ProjectId.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.KeenIOConfig.ProjectIdPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ProjectId
        {
            get
            {
                return ((string)(base[global::Multimeter.Config.KeenIOConfig.ProjectIdPropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.KeenIOConfig.ProjectIdPropertyName] = value;
            }
        }
        #endregion
        
        #region WriteKey Property
        /// <summary>
        /// The XML name of the <see cref="WriteKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string WriteKeyPropertyName = "writeKey";
        
        /// <summary>
        /// Gets or sets the WriteKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The WriteKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.KeenIOConfig.WriteKeyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string WriteKey
        {
            get
            {
                return ((string)(base[global::Multimeter.Config.KeenIOConfig.WriteKeyPropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.KeenIOConfig.WriteKeyPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Multimeter.Config
{
    
    
    /// <summary>
    /// The SolutionConfig Configuration Element.
    /// </summary>
    public partial class SolutionConfig : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets name of the application
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("Name of the application")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.SolutionConfig.NamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Multimeter.Config.SolutionConfig.NamePropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.SolutionConfig.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Project Property
        /// <summary>
        /// The XML name of the <see cref="Project"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ProjectPropertyName = "project";
        
        /// <summary>
        /// Gets or sets the type of project: Web.UI, Web.API, Windows Service
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The type of project: Web.UI, Web.API, Windows Service")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.SolutionConfig.ProjectPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Project
        {
            get
            {
                return ((string)(base[global::Multimeter.Config.SolutionConfig.ProjectPropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.SolutionConfig.ProjectPropertyName] = value;
            }
        }
        #endregion
        
        #region Environment Property
        /// <summary>
        /// The XML name of the <see cref="Environment"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string EnvironmentPropertyName = "environment";
        
        /// <summary>
        /// Gets or sets the Environment.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Environment.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Multimeter.Config.SolutionConfig.EnvironmentPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Environment
        {
            get
            {
                return ((string)(base[global::Multimeter.Config.SolutionConfig.EnvironmentPropertyName]));
            }
            set
            {
                base[global::Multimeter.Config.SolutionConfig.EnvironmentPropertyName] = value;
            }
        }
        #endregion
    }
}
